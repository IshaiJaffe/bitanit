// Generated by CoffeeScript 1.4.0
(function () {

    this.Rooms = new Meteor.Collection('rooms');


    Schemas.Rooms = new SimpleSchema({
        mac: {
            type: Number,
            decimal: false,
            unique: true,
            label: 'מק"ט',
            autoValue: function () {
                if (!this.isInsert)
                    return;
                return getAutoMac('Rooms', 'mac');
            }
        },
        name: {
            type: String,
            max: 20,
            label: 'שם'
        },
        description: {
            type: String,
            optional: true,
            label: 'תיאור',
            autoform: {
                rows: 5
            }
        },
        'content.$.item': {
            type: String,
            regEx: SimpleSchema.RegEx.Id,
            label: 'פריט',
            autoform: {
                options: function () {
                    return _.map(Items.find().fetch(), function (item) {
                        return {
                            label: item.name,
                            value: item._id
                        };
                    });
                }
            }
        },
        'content.$.quantity': {
            type: Number,
            min: 0,
            decimal: false,
            label: 'כמות'
        },
        redLine: {
            type: Number,
            min: 0,
            decimal: false,
            label: 'קו אדום'
        },
        createdAt: {
            type: Date,
            label: 'נוצר ב',
            autoValue: function () {
                if (this.isInsert) {
                    return new Date();
                }
            }
        },
        updatedAt: {
            type: Date,
            optional: true,
            label: 'עודכן ב',
            autoValue: function () {
                if (this.isUpdate) {
                    return new Date();
                }
            }
        },
        picture: {
            type: String,
            label: 'תמונה',
            optional: true,
            autoform: {
                afFieldInput: {
                    type: 'fileUpload',
                    collection: 'Attachments'
                }
            }
        },
        creator: {
            type: String,
            label: 'נוצר ע"י',
            regEx: SimpleSchema.RegEx.Id,
            autoValue: function () {
                if (this.isInsert) {
                    return Meteor.userId();
                }
            },
            autoform: {
                options: function () {
                    return _.map(Meteor.users.find().fetch(), function (user) {
                        return {
                            label: user.emails[0].username,
                            value: user._id
                        };
                    });
                }
            }
        }
    });

    Rooms.attachSchema(Schemas.Rooms);


    Rooms.calculateQuery = function (rooms, items, requestedRooms) {
        var roomById = _.indexById(rooms);
        var itemById = _.indexById(items);
        for (var roomId in requestedRooms) {
            var room = roomById[roomId];
            if (!room)
                continue;
            var requested = requestedRooms[roomId];
            room.requestedQuantity = requested;
            room.canProduce = 0;
            while (requested > 0) {
                var consume = {};
                var reachedCriteria = true;
                for (var i = 0; i < room.content.length; i++) {
                    var content = room.content[i];
                    var itemId = content.item + '';
                    var quantity = content.quantity;
                    var item = itemById[itemId];
                    if (!item) {
                        reachedCriteria = false;
                        break;
                    }
                    if (item.quantity < quantity) {
                        reachedCriteria = false;
                        break;
                    }
                    consume[itemId] = quantity;
                }
                if (!reachedCriteria)
                    break;

                for (var itemId in consume) {
                    var item = itemById[itemId];
                    item.quantity -= consume[itemId];
                }
                room.canProduce++;
                requested--;
            }
        }
        rooms.forEach(function (room) {
            room.id = room._id + '';
            room.canProduce = room.canProduce || 0;
            room.requestedQuantity = room.requestedQuantity || 0;
            var minQuantity = Infinity;
            for (var i = 0; i < room.content.length; i++) {
                var content = room.content[i];
                var itemId = content.item + '';
                var quantity = content.quantity;
                var item = itemById[itemId];
                var produceQuantity = !item ? 0 : Math.floor(item.quantity / quantity);
                if (produceQuantity < minQuantity)
                    minQuantity = produceQuantity;
                if (minQuantity == 0)
                    break;
            }
            room.canProduce += minQuantity;
            room.isOverLimit = room.requestedQuantity > room.canProduce;
        });
        return rooms;
    }

    Rooms.calculateMissing = function(rooms,items,requestedRooms){
        var roomById = _.indexById(rooms);
        var itemById = _.indexById(items);
        var missing = {};
        for (var roomId in requestedRooms) {
            var room = roomById[roomId];
            if (!room)
                throw new Error('Room unknown');
            var requested = requestedRooms[roomId];
            while (requested > 0) {
                for (var i = 0; i < room.content.length; i++) {
                    var content = room.content[i];
                    var itemId = content.item + '';
                    var quantity = content.quantity;
                    var item = itemById[itemId];
                    if(!item) {
                        console.error('item is missing',itemId);
                        continue;
                    }
                    var inventoryQuantity = item.quantity || 0;
                    if (inventoryQuantity < quantity)
                        missing[itemId] = (missing[itemId] || 0) + (inventoryQuantity - quantity);
                    else
                        item.quantity -= quantity;
                }
                requested--;
            }
        }
        missing = _.map(missing,function(quantity,itemId){
            var item = itemById[itemId];
            item.missing = -quantity;
            item.id = item._id + '';
            return item;
        });
        return missing;
    }

}).call(this);
